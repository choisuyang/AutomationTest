

package com.cj.pack;

import java.util.List;

import org.openqa.selenium.*;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.cj.util.SmartProperties;

public class Duplicate {

    private WebDriver driver;
    private String ID;
    private String PW;

    //XPath expression
    private String x_productList = "//div[@class='prod_info']/strong/a[starts-with(@spcid, 'HOME____live__majitem-')]";
    private String oneProduct = "//ul[@class='selected_lst']/li/div[@class='item_name']";
    private String direct = "//div[contains(@class,'buy_wrap')]//*[contains(text(),'바로구매')]";
    private String notYetProduct = "//div[contains(@class,'buy_wrap')]//*[contains(text(),'주문 가능한 상태가 아닙니다')]";
    private String notYetLive = "//div[contains(@class,'buy_wrap')]//*[contains(text(),'생방송 중 주문가능')]";
    private String soldout = "//div[contains(@class,'buy_wrap')]//*[contains(text(),'매진')]";
    private String exceptionDirect = "//div[contains(@class,'buy_wrap')]//*[contains(text(),'바로구매')]";

    private String path;
    private String path_chkProduct;
    private String path_Product_Name;

    private String chkProduct;
    private String broadStatus;

    private int cnt_productList;

    public Duplicate(WebDriver Driver) throws Exception {

        driver = Driver;
        << Duuplicate 메소드에서 Driver 값을 가져와서 driver에 적용
    }

    public boolean schedule(int num) throws Exception {
        << schedule 메소드에서 int numb 를 받아온다.

        boolean option_result1 = false;
        boolean option_result2 = false;

        WebDriverWait wait = new WebDriverWait(driver, 10);
        << 10초간 대기

        SmartProperties sp = SmartProperties.getInstance();

        << 조건문에 따라 들어온 num 값에 맞는 조건문에서 getProperty 에 ID_+ num 값 적용
        if(num > 10 && num <= 20) {
            ID = sp.getProperty("ID_" + (num-10));
            PW = sp.getProperty("PW_" + (num-10));
        }else if(num > 20 && num <= 30) {
            ID = sp.getProperty("ID_" + (num-20));
            PW = sp.getProperty("PW_" + (num-20));
        }else if(num > 30 && num <= 40) {
            ID = sp.getProperty("ID_" + (num-30));
            PW = sp.getProperty("PW_" + (num-30));
        }else {
            ID = sp.getProperty("ID_"+num);
            PW = sp.getProperty("PW_"+num);
        }

        System.out.println("접속 아이디 : " + ID);
        << 해당아이디 값 노출

        // 로그인 처리
        driver.findElement(By.xpath("//*[@class='log_in']/a")).click();
        Thread.sleep(3000);
        << 로그인 버튼 클릭후 스레드 3초간 멈춤

        driver.findElement(By.xpath("//*[@id='id_input']")).sendKeys(ID);
        driver.findElement(By.xpath("//*[@id='password_input']")).sendKeys(PW);
        driver.findElement(By.xpath("//*[@id='loginSubmit']")).click();
        Thread.sleep(3000);
        << 위에서 sp 에서 가져온 아이디 및 비밀번호 값 적용후 로그인 버튼 클릭후 스레드 3초간 멈춤

        if(existElement(driver, "//button[@id='hide_layer']", "비밀번호 재설정팝업")) {
            driver.findElement(By.xpath("//button[@id='hide_layer']")).click();
            System.out.println(">> 비밀번호 재설정팝업 : 3개월뒤 버튼 클릭");
            Thread.sleep(3000);
        }
        << 해당 메소드에서 조건 값을 가지고와서 시작 (비밀번호 재설정팝업 있는지 확인) , 3개월뒤 버튼 클릭후 스레드 시작

        if(!existElement(driver, "//*[@class='log_out']/a", "로그아웃")) {
            System.out.println("로그인 실패");
            return false;
        }else {
            System.out.println("로그인 완료");
        }
        << 로그아웃이 있어서 참 값이 나오면 반대값으로 false로 바뀌며 로그인 완료로 노출됨

        // 편성표 버튼 클릭 //*[class='lst_home']/li[1]/a
        driver.findElement(By.linkText("TV쇼핑")).click();
        System.out.println("편성표 버튼 클릭");
        Thread.sleep(3000);
        << TV쇼핑 클릭후 진입 스레드 시작

        // LIVE 상품 제외 모든 상품 / LIVE 상품 : List<WebElement> live_productList = driver.findElements(By.xpath(x_live_productList));
        wait.until(ExpectedConditions.presenceOfAllElementsLocatedBy(By.xpath(x_productList)));
        << 모든 돔에 x_productList가 있는 지 확인할때까지 대기
        List<WebElement> productList = driver.findElements(By.xpath(x_productList));
        <<이후 프로덕트 리스트에 해당 값 설정

        cnt_productList = productList.size();
        << 해당 값 갯수 설정

        System.out.println("구성된 상품 총 갯수(live 방송 포함) : " + cnt_productList);
        << 총갯수 노출

        if (num > cnt_productList) {
        >> 들어온 넘버 보다 총갯수가 작다면 해당 프린트문 노출 및 참값 전달

            System.out.println("편성표에 상품이 구성되어 있지 않습니다. 종료.");
            return true;

        } else {

            if (num < 10) {

                //path = ".//div[@class='schedule_prod']/ul[@class='list_schedule_prod']/li/a[@class='link_thumb'][@spcid='HOME____live__majitem-00" + num + "__']";

                path = "//ul[@class='list_schedule_prod']/li/a[@spcid='HOME____live__majitem-00" + num + "__']"; <<  편성표에 시간대별 영역
                path_chkProduct = "//ul[@class='list_schedule_prod']/li/a[@spcid='HOME____live__majitem-00" + num + "__']/following-sibling::div[1]/div[1]"; << 가격
                path_Product_Name = "//ul[@class='list_schedule_prod']/li/a[@spcid='HOME____live__majitem-00" + num + "__']/following-sibling::div[1]/strong/a/span"; << 제목

            } else {

                path = "//ul[@class='list_schedule_prod']/li/a[@spcid='HOME____live__majitem-0" + num + "__']";
                path_chkProduct = "//ul[@class='list_schedule_prod']/li/a[@spcid='HOME____live__majitem-0"   + num + "__']/following-sibling::div[1]/div[1]";
                path_Product_Name = "//ul[@class='list_schedule_prod']/li/a[@spcid='HOME____live__majitem-0"   + num + "__']/following-sibling::div[1]/strong/a/span";
            }

            // LIVE 방송상품
            if (num == 0) {

                path = "//ul[@class='list_schedule_prod']/li/a[@spcid='HOME____live__livemaj-001__']";
                path_chkProduct = "//ul[@class='list_schedule_prod']/li/a[@spcid='HOME____live__livemaj-001__']/following-sibling::div[1]/div[1]";
                path_Product_Name = "//ul[@class='list_schedule_prod']/li/a[@spcid='HOME____live__livemaj-001__']/following-sibling::div[1]/strong/a/span";
            }
        }

        // move to top of page
        // JavascriptExecutor js = (JavascriptExecutor) driver;
        // js.executeScript("window.scrollTo(0, 0)");

        Actions action = new Actions(driver);
        WebElement element = driver.findElement(By.xpath("//div[@class='btn_pc_top']/a"));
        action.moveToElement(element).click().build().perform();
        Thread.sleep(5000);
        << action 마우스 기능, 해당 엘리먼트를 찾아서 마우스로 클릭후 스레드 실행

        // move to element
        element = driver.findElement(By.xpath(path));
        action.moveToElement(element).build().perform();
        Thread.sleep(3000);
        << 위에서 편셩표 리스트 영역 마우스 클릭

        System.out.println("상품명 : " + driver.findElement(By.xpath(path_Product_Name)).getText());
        System.out.println("상품 xpath : " + path);
        >> 해당 편셩표 제목 노출

        // checked element 방송상태
        broadStatus = driver.findElement(By.xpath("//span[@id='broadStatus']")).getText();
        System.out.println("선택한 상품 방송상태 : " + broadStatus);
        Thread.sleep(3000);
        >> 방송상태 노출

        // 상담신청 체크
        chkProduct = driver.findElement(By.xpath(path_chkProduct)).getText();

        if (chkProduct.contains("상담신청상품")) {

            System.out.println("상품종류 : 상담신청상품 입니다.");
            return true;

        } else if (chkProduct.contains("월 렌탈료")) {

            System.out.println("상품종류 : 월 렌탈료 상품입니다.");
            return true;

        } else {

            System.out.println("상품종류 : 일반상품");
        }

        // 상품클릭
        action.moveToElement(element).click().build().perform();
        System.out.println("상품상세 진입");
        Thread.sleep(3000);

        if (isAlertPresent()) {

            Alert alert = driver.switchTo().alert(); << 얼럿창으로 전환
            if (alert.getText().equals("죄송합니다. 현재 매진된 상품입니다.[01]")) {

                System.out.println(alert.getText());
                alert.accept(); << 얼럿 수락 선택

                if (broadStatus.equals("다음방송")) {
                    return false;
                }else {
                    return true;
                }
            }
        }

        // 단일 or 옵션상품
        if (existElement(driver, oneProduct, "oneProduct")) {
            << 해당 엘리먼트 확인후 불린값 반환

            System.out.println("상품 : 단일상품");

            // 바로구매 유무 체크
            if (existElement(driver, direct, "direct")) {

                driver.findElement(By.linkText("바로구매")).click();
                System.out.println("바로구매 클릭");

            } else {

                System.out.println("단일상품 주문불가 : " + driver.findElement(By.xpath("//div[contains(@class,'buy_wrap')]/div[2]")).getText());
                return false;
            }

        } else if (existElement(driver, "(//div[@class='select_wrap']/div[1])[position()=1]", "option1")) { << 옵션 유뮤 체크

            System.out.println("상품 : 옵션상품");

            // 바로구매 버튼 유무 및 옵션 체크
            if (existElement(driver, direct, "direct")) {

                // option_1
                driver.findElement(By.xpath("(//div[@class='select_wrap']/div[1])[position()=1]")).click(); << 옵션 첫번째꺼 클릭
                System.out.println("option_1 : click");

                List<WebElement> optionList1 = driver.findElements(By.xpath("(//div[@class='select_wrap']/div[1])[position()=1]/div/div//ul/li"));

                System.out.println("option_1 size: " + optionList1.size()); << 옵션 리스트 몇개인지 확인

                for (int i=0; i < optionList1.size(); i++) { << 반복문으로 리스트 개수만큼 돌기

                    if (!optionList1.get(i).getAttribute("class").contains("soldout")) {  << 품절 상품없는지 체크후 첫번째 리스트 선택
                        optionList1.get(i).click();
                        option_result1 = true;
                        break;
                    }

//               } else if( i == optionList1.size()-1) {
//
//                  driver.findElement(By.xpath("//div[@class='option_wrap']/div[@class='select_wrap']/div[1]")).click();
//               }

                }

                // option_2
                if (existElement(driver, "(//div[@class='select_wrap']/div[2])[position()=1]", "option2")) { << 다중옵션 확인

                    driver.findElement(By.xpath("(//div[@class='select_wrap']/div[2])[position()=1]")).click(); << 두번째 옵션 클릭
                    System.out.println("option_2 : click");

                    List<WebElement> optionList2 = driver.findElements(By.xpath("(//div[@class='select_wrap']/div[2])[position()=1]/div/div/ul/li"));

                    System.out.println("option_2 size : " + optionList2.size()); << 두번째 옵션 몇개인지 확인

                    for (int i=0; i < optionList2.size(); i++) { << 두번째 옵션 개수만큼 반복

                        if (!optionList2.get(i).getAttribute("class").contains("soldout")) { << 품절 없는지 확인후 첫번째 옵션 선택
                            optionList2.get(i).click();
                            option_result2 = true;
                            break;
                        }

//                  }else if( i == optionList2.size()-1) {
//
//                     driver.findElement(By.xpath("//div[@class='option_wrap']/div[@class='select_wrap']/div[2]")).click();
//                  }
                    }

                    // 옵션이 2개일 경우 매진상태 점검
                    if(!option_result1 && !option_result2) { << 둘다 품절이다면 참값으로 실행

                        System.out.println("옵션 2개 매진 : 상품구매 불가");

                        if (broadStatus.equals("다음방송")) {
                            return false;
                        }else {
                            return true;
                        }
                    }
                }

                // 옵션이 1개일 경우 매진상태 점검
                if(!option_result1) {

                    System.out.println("옵션 1개 매진 : 상품구매 불가");
                    if (broadStatus.equals("다음방송")) {
                        return false;
                    }else {
                        return true;
                    }
                }

            } else {

                System.out.println("옵션상품 주문불가 : " + driver.findElement(By.xpath("//div[contains(@class,'buy_wrap')]/div[2]")).getText());
                return false;
            }

            //바로구매 버튼
            driver.findElement(By.linkText("바로구매")).click();
            System.out.println("바로구매 클릭");

        } else if (existElement(driver, exceptionDirect, "바로구매(예외상황)")) {
            //예외적인 바로구매
            System.out.println("예외적인 바로구매 : 상품 육안확인 필요");

            driver.findElement(By.linkText("바로구매")).click();
            System.out.println("바로구매 클릭");

        } else if (existElement(driver, notYetProduct, "주문 불가능")) {

            // 생방송 일때만 상품이 오픈
            System.out.println("주문 상태 : 주문 가능한 상태가 아닙니다.");
            return true;


        } else if(existElement(driver, notYetLive, "주문 불가능")) {

            // 생방송 중 주문가능
            System.out.println("주문 상태 : 생방송 중 주문가능");
            return false;

        } else if(existElement(driver, soldout, "매진")) {
            //매진
            System.out.println("주문 상태 : 매진");
            if (broadStatus.equals("다음방송")) {
                return false;
            }else {
                return true;
            }

        } else {

            System.out.println("상품 진입 실패");
            return false;
        }

        // 주문서 진입 확인
        Thread.sleep(3000);
        System.out.println(driver.findElement(By.xpath("//*[@id='wrap_order']/h2")).getText()); <<주문서 텍스트 있는지 확인

        if (driver.findElement(By.xpath("//*[@id='wrap_order']/h2")).getText().contains("주문서")) { << 주문서가 포함되어있는지 확인

            System.out.println("장바구니 갯수:"+driver.findElement(By.xpath("//*[@class='num'][@spcid='GNBA____header__cart__']")).getText().substring(0, 1)); << 장바구니 갯수 숫자 노출

            int cnt = 0;

            //장바구니 정리
            if(driver.findElement(By.xpath("//*[@class='num'][@spcid='GNBA____header__cart__']")).getText() != "") { << 카트의 텍스트가 빈문자가 아니면 실행

                cnt = Integer.parseInt(driver.findElement(By.xpath("//*[@class='num'][@spcid='GNBA____header__cart__']")).getText().substring(0, 1)); << 장바구니 갯수

                if(cnt > 40) {

                    driver.findElement(By.xpath("//a[@spcid='GNBA____header__cart__']")).click(); << 장바구니 버튼 클릭
                    Thread.sleep(3000);

                    driver.findElement(By.xpath("//button[@id='_allDeleteBtn']")).click(); << 삭제버튼 클릭
                    Thread.sleep(3000);
                    driver.switchTo().alert().accept();
                    Thread.sleep(3000);
                }
            }

            System.out.println("주문서 확인 종료 합니다.");

        } else {
            System.out.println("주문서 진입 실패");
            return false;
        }

        return true;

    }

    // Alert 유무 체크
    public boolean isAlertPresent() throws Exception {

        boolean foundAlert = false;
        WebDriverWait wait = new WebDriverWait(driver, 5);
        try {
            wait.until(ExpectedConditions.alertIsPresent());
            foundAlert = true;
        } catch (NoAlertPresentException e) {
            foundAlert = false;
        } catch (TimeoutException eTO) {
            foundAlert = false;
        } catch (Exception e) {
            foundAlert = false;
        }
        return foundAlert;
    }
    >> 얼럿이 노출 대기 5초, 얼럿이 미노출, 타임아웃, 에러

    // element 유무체크
    public boolean existElement(WebDriver wd, String val, String txt) throws Exception {
    << wd 는 웹드라이버 값을 받고 전달  , val 는 path값을 받아옴 , text는 텍스트 값을 받아옴
    << 해당 값을 size() 에서 0 만 아니라면 true 값을 던져줌

        System.out.println(txt + " :: found elements : " + wd.findElements(By.xpath(val)).size());

        if(wd.findElements(By.xpath(val)).size() != 0) {
            return true;
        }else {
            return false;
        }
    }

}